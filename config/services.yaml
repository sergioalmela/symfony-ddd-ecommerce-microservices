# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Services are private by default

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/*/Domain/Entity/'
            - '../src/*/Domain/ValueObject/'
            - '../src/*/Domain/Event/'
    
    App\Order\Application\Query\GetOrders\GetOrdersQueryHandler:
        tags:
            - { name: messenger.message_handler, bus: query.bus }
            
    App\Order\Application\Query\GetOrderDetails\GetOrderDetailsQueryHandler:
        tags:
            - { name: messenger.message_handler, bus: query.bus }
                
    App\Order\Application\Command\CreateOrder\CreateOrderCommandHandler:
        tags:
            - { name: messenger.message_handler, bus: command.bus }

    # === CONTROLLERS (must be public) ===
    App\Order\Infrastructure\Http\Controller\:
        resource: '../src/Order/Infrastructure/Http/Controller/'
        tags: ['controller.service_arguments']
        public: true

    # === REPOSITORY BINDINGS ===
    App\Order\Domain\Repository\OrderRepository:
        class: App\Order\Infrastructure\Persistence\Doctrine\Repository\DoctrineOrderRepository

    App\Shared\Infrastructure\Http\EventListener\ApiExceptionListener:
        arguments:
            $debug: '%kernel.debug%'
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 100 }
